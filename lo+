import java.util.*;
import java.util.regex.*;

public class AnalizadorLexico {
    private String codigoFuente;
    private List<Token> tokens;
    private Map<String, TipoToken> tablaDeSimbolos;
    private int posicionActual;
    private int numeroDeLinea;
    private int columnaActual;

    public AnalizadorLexico(String codigoFuente) {
        this.codigoFuente = codigoFuente;
        this.tokens = new ArrayList<Token>();
        this.tablaDeSimbolos = new HashMap<String, TipoToken>();
        this.posicionActual = 0;
        this.numeroDeLinea = 1;
        this.columnaActual = 1;
    }

    AnalizadorLexico() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public List<Token> analizarCodigo() {
        while (posicionActual < codigoFuente.length()) {
            char caracterActual = codigoFuente.charAt(posicionActual);
            if (Character.isLetter(caracterActual)) {
                analizarIdentificador();
            } else if (Character.isDigit(caracterActual)) {
                analizarNumero();                
            } else if (caracterActual == '+') {
                agregarToken(TipoToken.OPERADOR_SUMA, "+");
            } else if (caracterActual == '-') {
                agregarToken(TipoToken.OPERADOR_RESTA, "-");
            } else if (caracterActual == '*') {
                agregarToken(TipoToken.OPERADOR_MULTIPLICACION, "*");
            } else if (caracterActual == '/') {
                agregarToken(TipoToken.OPERADOR_DIVISION, "/");
            } else if (caracterActual == '(') {
                agregarToken(TipoToken.PARENTESIS_IZQUIERDO, "(");
            } else if (caracterActual == ')') {
                agregarToken(TipoToken.PARENTESIS_DERECHO, ")");
            } else if (caracterActual == '=') {
                analizarAsignacion();
            } else if (caracterActual == '\n') {
                avanzarPosicion();
                numeroDeLinea++;
                columnaActual = 1;
                
            } else if (Character.isWhitespace(caracterActual)) {
                avanzarPosicion();
                columnaActual++;;
            } else if (Character.isWhitespace(caracterActual)) {
                avanzarPosicion();

            } else {
                agregarError("Carácter desconocido '" + caracterActual + "'");
                avanzarPosicion();
                columnaActual++;
            }
        }
        return tokens;
    }

    private void analizarIdentificador() {
        int inicio = posicionActual;        
        while (posicionActual < codigoFuente.length() && Character.isLetterOrDigit(codigoFuente.charAt(posicionActual))) {
            avanzarPosicion();
            columnaActual++;
        }
        String identificador = codigoFuente.substring(inicio, posicionActual);
        TipoToken tipo = tablaDeSimbolos.get(identificador);
        if (tipo == null) {
            tipo = TipoToken.IDENTIFICADOR;
            tablaDeSimbolos.put(identificador, tipo);
        }
        agregarToken(tipo, identificador);
    }

    private void analizarNumero() {
        int inicio = posicionActual;
        while (posicionActual < codigoFuente.length() && Character.isDigit(codigoFuente.charAt(posicionActual))) {
            avanzarPosicion();
            columnaActual++;
        }
        if (posicionActual < codigoFuente.length() && codigoFuente.charAt(posicionActual) == '.') {
            avanzarPosicion();
            columnaActual++;
            while (posicionActual < codigoFuente.length() && Character.isDigit(codigoFuente.charAt(posicionActual))) {avanzarPosicion();
columnaActual++;
}
agregarToken(TipoToken.NUMERO_DECIMAL, codigoFuente.substring(inicio, posicionActual));
} else {
agregarToken(TipoToken.NUMERO_ENTERO, codigoFuente.substring(inicio, posicionActual));
}
}
    private void analizarAsignacion() {
    avanzarPosicion();
    columnaActual++;
    if (posicionActual < codigoFuente.length() && codigoFuente.charAt(posicionActual) == '=') {
        agregarToken(TipoToken.OPERADOR_ASIGNACION, "==");
        avanzarPosicion();
        columnaActual++;
    } else {
        agregarToken(TipoToken.OPERADOR_ASIGNACION, "=");
    }
}

private void agregarToken(TipoToken tipo, String lexema) {
    tokens.add(new Token(tipo, lexema, numeroDeLinea, columnaActual - lexema.length()));
}

private void agregarError(String mensaje) {
    tokens.add(new Token(TipoToken.ERROR, mensaje, numeroDeLinea, columnaActual));
}

private void avanzarPosicion() {
    posicionActual++;
}

    void analizarCodigo(String codigoFuente) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

public enum TipoToken {
    IDENTIFICADOR,
    NUMERO_ENTERO,
    NUMERO_DECIMAL,
    OPERADOR_SUMA,
    OPERADOR_RESTA,
    OPERADOR_MULTIPLICACION,
    OPERADOR_DIVISION,
    OPERADOR_ASIGNACION,
    PARENTESIS_IZQUIERDO,
    PARENTESIS_DERECHO,
    ERROR
}

public class Token {
    private TipoToken tipo;
    private String lexema;
    private int numeroDeLinea;
    private int columna;

    public Token(TipoToken tipo, String lexema, int numeroDeLinea, int columna) {
        this.tipo = tipo;
        this.lexema = lexema;
        this.numeroDeLinea = numeroDeLinea;
        this.columna = columna;
    }

    public TipoToken getTipo() {
        return tipo;
    }

    public String getLexema() {
        return lexema;
    }

    public int getNumeroDeLinea() {
        return numeroDeLinea;
    }

    public int getColumna() {
        return columna;
    }
}

public void mostrarTablaDeTokens() {
    System.out.println("Tabla de Tokens:");
    System.out.println("-----------------");
    for (Token token : tokens) {
        System.out.printf("%-20s %-10s %-10s %s\n", token.getLexema(), token.getTipo(), token.getNumeroDeLinea(), token.getColumna());
    }
}

public void analizar(String texto) {
    StringTokenizer tokenizer = new StringTokenizer(texto);
    Map<String, Integer> contadorPalabras = new HashMap<String, Integer>();
int linea = 1;
int columna = 1;

while (tokenizer.hasMoreTokens()) {
    String token = tokenizer.nextToken();

    if (token.equals("\n")) {
        linea++;
        columna = 1;
    } else {
            contadorPalabras.put(token, contadorPalabras.get(token) + 1);
        } else {
            contadorPalabras.put(token, 1);
        }

         if (contadorPalabras.containsKey(token)) {
       columna += token.length() + 1;
    }
}

}


}

/---------------------------------------------------------------------------------------------------------------------------------------------------//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Editor de Codigo
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.swing.*;

public class EditorDeCodigo extends JFrame implements ActionListener {
    
    


  // public static void main(String[] args) {
   //    EditorDeCodigo editor = new EditorDeCodigo();
   // }
    
    private final JTextPane editor;
    private JFileChooser fileChooser;
    private Object contentPane;
    
    public EditorDeCodigo() {
        // Configurar la ventana principal
        super("Editor de Código");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600);
        
        // Crear el área de texto del editor
        editor = new JTextPane();
        editor.setFont(new Font("Consolas", Font.PLAIN, 12));
        JScrollPane scrollPane = new JScrollPane(editor);
        getContentPane().add(scrollPane);
        
        // Crear el menú del editor
        JMenuBar menuBar = new JMenuBar();
        JMenu archivoMenu = new JMenu("Archivo");
        JMenuItem abrirItem = new JMenuItem("Abrir");
        abrirItem.addActionListener(this);
        archivoMenu.add(abrirItem);
        JMenuItem guardarItem = new JMenuItem("Guardar");
        guardarItem.addActionListener(this);
        archivoMenu.add(guardarItem);
        menuBar.add(archivoMenu);
        setJMenuBar(menuBar);
        
        // Crear el selector de archivos
        fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("."));
        
        



    }
 
   

    private void mostrarTablaDeTokens() {
        // Implementar el método aquí
       JButton btnTablaTokens = new JButton("Tabla de Tokens");
btnTablaTokens.addActionListener(e -> mostrarTablaDeTokens());
 //panelBotones.add(btnTablaTokens);
    }  
    
    public void actionPerformed(ActionEvent e) {
        
        
            
         // Manejar los eventos del menú
        if (e.getActionCommand().equals("Abrir")) {
            int returnVal = fileChooser.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                try {
                    BufferedReader reader = new BufferedReader(new FileReader(file));
                    editor.read(reader, null);
                    reader.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Error al abrir el archivo");
                }
            }
        } else if (e.getActionCommand().equals("Guardar")) {
            int returnVal = fileChooser.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                try {
                    BufferedWriter writer = new BufferedWriter(new FileWriter(file));
                    editor.write(writer);
                    writer.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Error al guardar el archivo");
                }
            }
        }
    }
    
    public static void main(String[] args) {
        EditorDeCodigo editor = new EditorDeCodigo();
        editor.setVisible(true);
    }
    
public void guardarTexto(String texto) {
    editor.setText(texto);
   // AnalizadorLexico.analizar(texto);
}

}


    






        
