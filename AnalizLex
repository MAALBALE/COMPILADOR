import java.io.IOException;
import java.io.Reader;
import java.util.HashMap;
import java.util.Map;

public class AnalizadorLexico {

    public static final int TOKEN_ERROR = -1;
    public static final int TOKEN_FIN_DE_ARCHIVO = 0;
    public static final int TOKEN_IDENTIFICADOR = 1;
    public static final int TOKEN_ENTERO = 2;
    public static final int TOKEN_FLOAT = 3;
    public static final int TOKEN_ASIGNACION = 4;
    public static final int TOKEN_SUMA = 5;
    public static final int TOKEN_RESTA = 6;
    public static final int TOKEN_MULTIPLICACION = 7;
    public static final int TOKEN_DIVISION = 8;
    public static final int TOKEN_PARENTESIS_IZQ = 9;
    public static final int TOKEN_PARENTESIS_DER = 10;
    public static final int TOKEN_COMA = 11;
    public static final int TOKEN_PUNTO_Y_COMA = 12;
    public static final int TOKEN_LLAVE_IZQ = 13;
    public static final int TOKEN_LLAVE_DER = 14;

    public static final Map<Integer, String> TOKENS = new HashMap<>();
    static {
        TOKENS.put(TOKEN_FIN_DE_ARCHIVO, "FIN_DE_ARCHIVO");
        TOKENS.put(TOKEN_IDENTIFICADOR, "IDENTIFICADOR");
        TOKENS.put(TOKEN_ENTERO, "ENTERO");
        TOKENS.put(TOKEN_FLOAT, "FLOAT");
        TOKENS.put(TOKEN_ASIGNACION, "ASIGNACION");
        TOKENS.put(TOKEN_SUMA, "SUMA");
        TOKENS.put(TOKEN_RESTA, "RESTA");
        TOKENS.put(TOKEN_MULTIPLICACION, "MULTIPLICACION");
        TOKENS.put(TOKEN_DIVISION, "DIVISION");
        TOKENS.put(TOKEN_PARENTESIS_IZQ, "PARENTESIS_IZQ");
        TOKENS.put(TOKEN_PARENTESIS_DER, "PARENTESIS_DER");
        TOKENS.put(TOKEN_COMA, "COMA");
        TOKENS.put(TOKEN_PUNTO_Y_COMA, "PUNTO_Y_COMA");
        TOKENS.put(TOKEN_LLAVE_IZQ, "LLAVE_IZQ");
        TOKENS.put(TOKEN_LLAVE_DER, "LLAVE_DER");
    }

    private Reader reader;
    private int currentChar;
    private StringBuilder lexeme;

    public AnalizadorLexico(Reader reader) throws IOException {
        this.reader = reader;
        this.currentChar = reader.read();
        this.lexeme = new StringBuilder();
    }

    public int nextToken() throws IOException {
        clearLexeme();
        while (Character.isWhitespace(currentChar)) {
            readChar();
        }
        if (currentChar == -1) {
            return TOKEN_FIN_DE_ARCHIVO;
        } else if (Character.isLetter(currentChar)) {
            while (Character.isLetterOrDigit(currentChar)) {
                addCharToLexeme();
                readChar();
            }
            return TOKEN_IDENTIFICADOR;
        } else if (Character.isDigit(currentChar)) {
            while (Character.isDigit(currentChar)) {
                addCharToLexeme();
                readChar();
            }
            if (currentChar == '.') {
                addCharToLexeme();
                readChar();
                while (Character.isDigit(currentChar)) {
                    addCharToLexeme();
                    readChar();
                }
                return TOKEN_FLOAT;
            } else {
                return TOKEN_ENTERO;
            }
        } else {
            switch (currentChar) {
            case '=':
                addCharToLexeme();
                readChar();
                if (currentChar == '=') {
                    addCharToLexeme();
                    readChar();
                }
                return TOKEN_ASIGNACION;
            case '+':
                addCharToLexeme();
                readChar();
                return TOKEN_SUMA;
            case '-':
                addCharToLexeme();
                readChar();
                return TOKEN_RESTA;
            case '*':
                addCharToLexeme();
                readChar();
                return TOKEN_MULTIPLICACION;
            case '/':
                addCharToLexeme();
                readChar();
                return TOKEN_DIVISION;
            case '(':
                addCharToLexeme();
                readChar();
                return TOKEN_PARENTESIS_IZQ;
            case ')':
                addCharToLexeme();
                readChar();
                return TOKEN_PARENTESIS_DER;
            case ',':
                addCharToLexeme();
                readChar();
                return TOKEN_COMA;
            case ';':
                addCharToLexeme();
                readChar();
                return TOKEN_PUNTO_Y_COMA;
            case '{':
                addCharToLexeme();
                readChar();
                return TOKEN_LLAVE_IZQ;
            case '}':
                addCharToLexeme();
                readChar();
                return TOKEN_LLAVE_DER;
            default:
                addCharToLexeme();
                readChar();
                return TOKEN_ERROR;
        }
    }

    private void clearLexeme() {
        lexeme.setLength(0);
    }

    private void addCharToLexeme() {
        lexeme.append((char) currentChar);
    }

    private void readChar() throws IOException {
        currentChar = reader.read();
    }

    public String getLexeme() {
        return lexeme.toString();
    }

    public static void main(String[] args) {
        String input = "int x = 10;\n" +
                       "float y = 3.14;\n" +
                       "if (x == 10) {\n" +
                       "   y = y * x;\n" +
                       "}\n" +
                       "else {\n" +
                       "   y = y - x;\n" +
                       "}\n" +
                       "System.out.println(y);";
        try {
            AnalizadorLexico lexico = new AnalizadorLexico(new java.io.StringReader(input));
            int token = lexico.nextToken();
            while (token != TOKEN_FIN_DE_ARCHIVO) {
                String tokenName = TOKENS.get(token);
                if (tokenName == null) {
                    tokenName = "DESCONOCIDO";
                }
                System.out.printf("%-18s %s\n", tokenName, lexico.getLexeme());
                token = lexico.nextToken();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

           
