import java.util.*;

public class Compiler {
    private static Map<Character, Integer> precedence = new HashMap<>();

    static {
        precedence.put('+', 1);
        precedence.put('-', 1);
        precedence.put('*', 2);
        precedence.put('/', 2);
    }

    private static boolean isOperator(char c) {
        return precedence.containsKey(c);
    }

    private static int getPrecedence(char c) {
        return precedence.getOrDefault(c, 0);
    }

    private static List<String> toRPN(String expr) {
        List<String> output = new ArrayList<>();
        Stack<Character> stack = new Stack<>();

        for (char c : expr.toCharArray()) {
            if (isOperator(c)) {
                while (!stack.isEmpty() && getPrecedence(c) <= getPrecedence(stack.peek())) {
                    output.add(stack.pop().toString());
                }
                stack.push(c);
            } else {
                output.add(String.valueOf(c));
            }
        }

        while (!stack.isEmpty()) {
            output.add(stack.pop().toString());
        }

        return output;
    }

    public static void main(String[] args) {
        String expr = "2 + 3 * 4";
        List<String> rpn = toRPN(expr);
        System.out.println(rpn);
    }
}


